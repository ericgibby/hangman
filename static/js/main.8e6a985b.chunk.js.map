{"version":3,"sources":["components/DisplayWord/DisplayWord.js","components/EnterWord/EnterWord.js","components/Gallows/Gallows.js","components/GameOver/GameOver.js","components/SelectLetters/SelectLetters.js","App.js","serviceWorker.js","index.js"],"names":["DisplayWord","_ref","usedLetters","word","arguments","length","undefined","split","map","letter","code","charCodeAt","join","getCharacters","parts","part","index","letters","i","react_default","a","createElement","key","concat","className","reduce","arr","Object","toConsumableArray","slice","EnterWord","hidden","onSubmit","_useState","useState","_useState2","slicedToArray","wordChanged","e","preventDefault","type","placeholder","value","onChange","text","target","toUpperCase","Gallows","incorrectCount","stage","Math","min","src","process","alt","GameOver","success","heading","message","classnames","alert","primary","ALPHABET","Array","fill","item","String","fromCharCode","SelectLetters","disabled","onLetterClick","wordLetters","handleClick","character","buttons","selected","onClick","NUM_TRIES","App","setWord","_useState3","_useState4","setUsedLetters","obj","objectSpread","defineProperty","keys","count","complete","used","GameOver_GameOver","components_EnterWord_EnterWord","newWord","components_DisplayWord_DisplayWord","Gallows_Gallows","components_SelectLetters_SelectLetters","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e6a985b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport './DisplayWord.scss';\n\nexport function getCharacters(word = '', usedLetters = {}) {\n\tconst characters = word.split('').map(letter => {\n\t\t// Only mask letters between 65-90 (A-Z)\n\t\tconst code = letter.charCodeAt();\n\t\tif (code >= 65 && code <= 90) {\n\t\t\treturn usedLetters[letter] ? letter : '_';\n\t\t}\n\t\treturn letter;\n\t});\n\treturn characters.join('');\n}\n\nfunction DisplayWord({ usedLetters, word: wordProp }) {\n\tconst word = getCharacters(wordProp, usedLetters);\n\tconst words = word.split(' ');\n\tconst parts = words\n\t\t.map((part, index) => {\n\t\t\tconst letters = part.split('').map((letter, i) => (\n\t\t\t\t<span key={`Letter-${i}`} className=\"letter\">\n\t\t\t\t\t{letter}\n\t\t\t\t</span>\n\t\t\t));\n\t\t\treturn (\n\t\t\t\t<span key={`Word-${index}`} className=\"word\">\n\t\t\t\t\t{letters}\n\t\t\t\t</span>\n\t\t\t);\n\t\t})\n\t\t.reduce((arr, part, index) => [...arr, part, <span key={`Space-${index}`}>&nbsp;</span>], [])\n\t\t.slice(0, -1);\n\n\treturn word ? <div className=\"DisplayWord\">{parts}</div> : null;\n}\n\nDisplayWord.propTypes = {\n\tusedLetters: PropTypes.object,\n\tword: PropTypes.string\n};\n\nexport default DisplayWord;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport './EnterWord.scss';\n\nfunction EnterWord({ hidden, onSubmit }) {\n\tconst [word, wordChanged] = useState('');\n\n\tconst handleChange = e => {\n\t\tconst text = e.target.value.toUpperCase();\n\t\twordChanged(text);\n\t};\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tonSubmit && onSubmit(word);\n\t\twordChanged('');\n\t};\n\n\treturn hidden ? null : (\n\t\t<div className=\"EnterWord\">\n\t\t\t<p>Enter a word or phrase to guess.</p>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<div className=\"grid-x\">\n\t\t\t\t\t<div className=\"cell medium-10 small-12\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<span className=\"show-for-sr\">Enter a word</span>\n\t\t\t\t\t\t\t<input type=\"password\" placeholder=\"Enter a word\" value={word} onChange={handleChange} />\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"cell medium-2 small-12\">\n\t\t\t\t\t\t<button type=\"submit\" className=\"button primary\">\n\t\t\t\t\t\t\tOK\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nEnterWord.propTypes = {\n\thidden: PropTypes.bool,\n\tonSubmit: PropTypes.func\n};\n\nexport default EnterWord;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction Gallows({ incorrectCount }) {\n\tconst stage = Math.min(incorrectCount, 6);\n\treturn (\n\t\t<div className=\"Gallows\">\n\t\t\t<img src={`${process.env.PUBLIC_URL}/hangman-${stage}.svg`} alt=\"Hangman Gallows\" />\n\t\t</div>\n\t);\n}\n\nGallows.propTypes = {\n\tincorrectCount: PropTypes.number\n};\n\nexport default Gallows;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nfunction GameOver({ hidden, success }) {\n\tconst heading = success ? 'Congratulations!' : 'Game Over üôÅ';\n\tconst message = success ? 'You won!' : null;\n\treturn hidden ? null : (\n\t\t<div className={classnames('GameOver', 'callout', { alert: !success, primary: !!success })}>\n\t\t\t<h2>{heading}</h2>\n\t\t\t<p>{message}</p>\n\t\t</div>\n\t);\n}\n\nGameOver.propTypes = {\n\thidden: PropTypes.bool,\n\tsuccess: PropTypes.bool\n};\n\nexport default GameOver;\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './SelectLetters.scss';\n\nconst ALPHABET = new Array(26).fill('').map((item, index) => String.fromCharCode(65 + index));\n\nfunction SelectLetters({ disabled, hidden, onLetterClick, usedLetters, wordLetters }) {\n\tconst handleClick = e => {\n\t\tconst character = e.target.value;\n\t\tonLetterClick && onLetterClick(character);\n\t};\n\n\tconst buttons = ALPHABET.map((letter, index) => {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tkey={`LetterButton-${index}`}\n\t\t\t\tclassName={classnames('button', {\n\t\t\t\t\tselected: !!usedLetters[letter],\n\t\t\t\t\talert: !!usedLetters[letter] && !wordLetters[letter]\n\t\t\t\t})}\n\t\t\t\tvalue={letter}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tdisabled={disabled || !!usedLetters[letter]}>\n\t\t\t\t{letter}\n\t\t\t</button>\n\t\t);\n\t});\n\n\treturn hidden ? null : <div className=\"SelectLetters\">{buttons}</div>;\n}\n\nSelectLetters.propTypes = {\n\tdisabled: PropTypes.bool,\n\thidden: PropTypes.bool,\n\tonLetterClick: PropTypes.func,\n\tusedLetters: PropTypes.object,\n\twordLetters: PropTypes.object\n};\n\nexport default SelectLetters;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport DisplayWord from './components/DisplayWord/DisplayWord';\nimport EnterWord from './components/EnterWord/EnterWord';\nimport Gallows from './components/Gallows/Gallows';\nimport GameOver from './components/GameOver/GameOver';\nimport SelectLetters from './components/SelectLetters/SelectLetters';\n\nconst NUM_TRIES = 6;\n\nfunction App() {\n\tconst [word, setWord] = useState('');\n\tconst [usedLetters, setUsedLetters] = useState({});\n\n\tconst wordLetters = word.split('').reduce((obj, letter) => {\n\t\tconst code = letter.charCodeAt();\n\t\tif (code >= 65 && code <= 90) {\n\t\t\treturn { ...obj, [letter]: true };\n\t\t}\n\t\treturn obj;\n\t}, {});\n\tconst incorrectCount = Object.keys(usedLetters).reduce((count, letter) => count + (!wordLetters[letter] ? 1 : 0), 0);\n\tconst complete =\n\t\t!!word &&\n\t\t(incorrectCount === NUM_TRIES ||\n\t\t\tObject.keys(wordLetters).reduce((used, letter) => used && !!usedLetters[letter], true));\n\n\tconst handleClickReset = () => {\n\t\tsetWord('');\n\t\tsetUsedLetters({});\n\t};\n\tconst handleSubmit = newWord => setWord(newWord);\n\tconst handleLetterClick = letter => setUsedLetters({ ...usedLetters, [letter]: true });\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t<ul className=\"menu align-middle\">\n\t\t\t\t\t\t<li className=\"menu-text\">\n\t\t\t\t\t\t\t<h1>Hangman</h1>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<button className=\"button hollow\" onClick={handleClickReset}>\n\t\t\t\t\t\t\t\tStart Over\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<div className=\" grid-container\">\n\t\t\t\t<div className=\"grid-x top-section\">\n\t\t\t\t\t<div className=\"cell small-12 align-center\">\n\t\t\t\t\t\t<GameOver success={complete && incorrectCount < NUM_TRIES} hidden={!complete} />\n\t\t\t\t\t\t<EnterWord onSubmit={handleSubmit} hidden={!!word} />\n\t\t\t\t\t\t<DisplayWord word={word} usedLetters={usedLetters} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"grid-x\">\n\t\t\t\t\t<div className=\"cell small-12 medium-8 text-center\">\n\t\t\t\t\t\t<Gallows incorrectCount={incorrectCount} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"cell small-12 medium-4\">\n\t\t\t\t\t\t<SelectLetters\n\t\t\t\t\t\t\tonLetterClick={handleLetterClick}\n\t\t\t\t\t\t\tusedLetters={usedLetters}\n\t\t\t\t\t\t\twordLetters={wordLetters}\n\t\t\t\t\t\t\thidden={!word}\n\t\t\t\t\t\t\tdisabled={complete}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}